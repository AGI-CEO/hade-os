// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Define models based on the application's data requirements

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String?
  role          String    @default("user") // user, admin, etc.
  userType      String    @default("landlord") // landlord, tenant
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  properties    Property[]
  tenant        Tenant?   @relation("UserToTenant")

  // NextAuth.js fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  notifications        Notification[]
  maintenanceMessages  MaintenanceMessage[]

  @@index([email])
  @@index([userType])
}

// NextAuth.js models
model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id                  String               @id @default(uuid())
  address             String
  city                String
  state               String
  zipCode             String
  image               String?
  value               Float
  occupancy           String // occupied, vacant
  rentAmount          Float?
  rentDue             DateTime?
  dateAdded           DateTime             @default(now())
  userId              String
  user                User                 @relation(fields: [userId], references: [id])
  maintenanceRequests MaintenanceRequest[]
  tenants             Tenant[]
  leases              Lease[]
  documents           Document[]           @relation("PropertyDocuments")
  transactions        Transaction[]
  notifications       Notification[]
  propertyImages      PropertyImage[]

  @@index([userId])
}

model MaintenanceRequest {
  id            String    @id @default(uuid())
  title         String
  description   String
  status        String    // pending, in-progress, completed
  priority      String    // low, medium, high
  cost          Float?    // Cost of the maintenance work
  vendorName    String?   // Name of the assigned vendor
  vendorContact String?   // Contact info for the vendor
  notes         String?   // Additional notes about the maintenance
  completedDate DateTime? // When the maintenance was completed
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id])
  messages      MaintenanceMessage[]

  @@index([propertyId])
}

model PortfolioSnapshot {
  id            String    @id @default(uuid())
  totalValue    Float
  monthlyIncome Float
  snapshotDate  DateTime  @default(now())
}

model Tenant {
  id            String    @id @default(uuid())
  name          String
  email         String
  phone         String
  image         String?
  leaseStart    DateTime
  leaseEnd      DateTime
  status        String    // active, pending, past
  rentAmount    Float
  lastPayment   DateTime?
  happinessScore Int      @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id])
  userId        String?   @unique
  user          User?     @relation("UserToTenant", fields: [userId], references: [id])
  leases        Lease[]
  rentPayments  RentPayment[]
  documents     Document[]    @relation("TenantDocuments")
  notifications Notification[]

  @@index([propertyId])
  @@index([email])
}

// Lease Management Models
model LeaseTemplate {
  id            String    @id @default(uuid())
  name          String
  description   String?
  content       String    @db.Text  // The template content in markdown or HTML
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String    // The landlord who created the template
  leases        Lease[]   // Leases created from this template
}

model Lease {
  id              String    @id @default(uuid())
  title           String
  content         String    @db.Text  // The lease content in markdown or HTML
  startDate       DateTime
  endDate         DateTime
  status          String    // draft, active, expired, renewed
  monthlyRent     Float
  securityDeposit Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  propertyId      String
  property        Property  @relation(fields: [propertyId], references: [id])
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  templateId      String?
  template        LeaseTemplate? @relation(fields: [templateId], references: [id])
  documents       Document[]    @relation("LeaseDocuments")

  @@index([propertyId])
  @@index([tenantId])
  @@index([templateId])
}

// Document Management Models
model Document {
  id            String    @id @default(uuid())
  name          String
  description   String?
  fileUrl       String    // URL to the stored file
  fileType      String    // PDF, DOCX, JPG, etc.
  fileSize      Int       // Size in bytes
  category      String    // lease, financial, maintenance, etc.
  isShared      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  propertyId    String?
  property      Property? @relation("PropertyDocuments", fields: [propertyId], references: [id])
  tenantId      String?
  tenant        Tenant?   @relation("TenantDocuments", fields: [tenantId], references: [id])
  leaseId       String?
  lease         Lease?    @relation("LeaseDocuments", fields: [leaseId], references: [id])

  @@index([propertyId])
  @@index([tenantId])
  @@index([leaseId])
  @@index([category])
}

// Financial Tracking Models
enum FinancialTransactionType {
  INCOME
  EXPENSE
}

model FinancialCategory {
  id           String        @id @default(uuid())
  name         String
  type         FinancialTransactionType
  transactions Transaction[]

  @@unique([name, type])
}

model Transaction {
  id          String                 @id @default(uuid())
  amount      Float
  date        DateTime
  description String?
  type        FinancialTransactionType
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  propertyId  String
  property    Property               @relation(fields: [propertyId], references: [id])
  categoryId  String
  category    FinancialCategory      @relation(fields: [categoryId], references: [id])

  @@index([propertyId])
  @@index([date])
  @@index([type])
  @@index([categoryId])
}

// Rent Payment Models
model RentPayment {
  id            String    @id @default(uuid())
  amount        Float
  date          DateTime
  method        String    // cash, check, bank transfer, etc.
  status        String    // pending, completed, failed
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([date])
  @@index([status])
}

// Notification System Models
model Notification {
  id                  String             @id @default(cuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  message             String
  type                NotificationType
  isRead              Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  propertyId          String?
  property            Property?          @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  tenantId            String?
  tenant              Tenant?            @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  relatedEntityType   String?
  relatedEntityId     String?

  @@index([userId, isRead, createdAt])
  @@index([propertyId])
  @@index([tenantId])
}

enum NotificationType {
  RENT_DUE
  RENT_OVERDUE
  MAINTENANCE_STATUS_UPDATE
  MAINTENANCE_NEW_REQUEST
  LEASE_RENEWAL_REMINDER
  GENERAL_SYSTEM_MESSAGE
  NEW_DOCUMENT_SHARED
  // Add more types as needed
}

model MaintenanceMessage {
  id                   String             @id @default(uuid())
  content              String
  createdAt            DateTime           @default(now())
  userId               String // ID of the user who sent the message
  user                 User               @relation(fields: [userId], references: [id])
  maintenanceRequestId String
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id])

  @@index([maintenanceRequestId])
  @@index([userId])
}

model PropertyImage {
  id          String   @id @default(uuid())
  imageUrl    String // Public URL from Supabase Storage
  storagePath String // Path to the file in Supabase Storage (e.g., property-images/propertyId/filename.jpg)
  altText     String?
  isPrimary   Boolean  @default(false)
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
}
